/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package main;

import dao.Buku;
import dao.Kategori;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.NoResultException;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.AbstractQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.JoinType;
import javax.persistence.criteria.Root;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author THINKPAD
 */
public class FormDataBuku extends javax.swing.JPanel {

    /**
     * Creates new form FormPeminjaman
     */
    EntityManagerFactory emf = Persistence.createEntityManagerFactory("ProjectLimangatusPU");
    EntityManager em = emf.createEntityManager();
    private Kategori idKategori;

    public FormDataBuku() {
        initComponents();
        setOpaque(false);
        setTableModel();
        loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dateTanggalBergabung = new model.DateChooser();
        dateTanggalKembali = new model.DateChooser();
        buttonGroup1 = new javax.swing.ButtonGroup();
        panelMain = new com.raven.swing.RoundPanel();
        panelView = new com.raven.swing.RoundPanel();
        buttonTambahView = new model.Button();
        jLabelDataPeminjamanBukuView = new javax.swing.JLabel();
        jScrollPaneDataPeminjamanBukuView = new javax.swing.JScrollPane();
        jTableDataPeminjamanBukuView = new javax.swing.JTable();
        buttonHapusView = new model.Button();
        buttonBatalView = new model.Button();
        jComboBoxCari = new javax.swing.JComboBox<>();
        textFieldCari = new javax.swing.JTextField();
        panelAdd = new com.raven.swing.RoundPanel();
        buttonSimpanAdd = new model.Button();
        buttonBatalAdd = new model.Button();
        jLabelTambahDataPeminjamanBukuAdd = new javax.swing.JLabel();
        jLabelIdMahasiswa = new javax.swing.JLabel();
        textFieldJudul = new model.TextField();
        jLabelIdMahasiswa1 = new javax.swing.JLabel();
        textFieldISBN = new model.TextField();
        textFieldTahunTerbit = new model.TextField();
        jLabelIdMahasiswa4 = new javax.swing.JLabel();
        textFieldPenerbit = new model.TextField();
        jLabelIdMahasiswa5 = new javax.swing.JLabel();
        jLabelIdMahasiswa7 = new javax.swing.JLabel();
        jLabelGambar = new javax.swing.JLabel();
        buttonBrowse = new model.Button();
        textFieldPathGambar = new model.TextField();
        jComboBoxKategori = new javax.swing.JComboBox<>();

        setLayout(new java.awt.CardLayout());

        panelMain.setBackground(new java.awt.Color(55, 55, 55));
        panelMain.setLayout(new java.awt.CardLayout());

        panelView.setBackground(new java.awt.Color(55, 55, 55));

        buttonTambahView.setBackground(new java.awt.Color(31, 85, 20));
        buttonTambahView.setForeground(new java.awt.Color(228, 229, 241));
        buttonTambahView.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/tambah20x20.png"))); // NOI18N
        buttonTambahView.setText("Tambah");
        buttonTambahView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTambahViewActionPerformed(evt);
            }
        });

        jLabelDataPeminjamanBukuView.setFont(new java.awt.Font("Leelawadee UI", 1, 18)); // NOI18N
        jLabelDataPeminjamanBukuView.setForeground(new java.awt.Color(242, 242, 242));
        jLabelDataPeminjamanBukuView.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/buku20x20.png"))); // NOI18N
        jLabelDataPeminjamanBukuView.setText("Data Buku");

        jTableDataPeminjamanBukuView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "null", "null"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableDataPeminjamanBukuView.setRowHeight(100);
        jTableDataPeminjamanBukuView.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTableDataPeminjamanBukuViewMousePressed(evt);
            }
        });
        jScrollPaneDataPeminjamanBukuView.setViewportView(jTableDataPeminjamanBukuView);
        jTableDataPeminjamanBukuView.getAccessibleContext().setAccessibleName("tes");

        buttonHapusView.setBackground(new java.awt.Color(31, 85, 20));
        buttonHapusView.setForeground(new java.awt.Color(228, 229, 241));
        buttonHapusView.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/hapus20x20.png"))); // NOI18N
        buttonHapusView.setText("Hapus");
        buttonHapusView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonHapusViewActionPerformed(evt);
            }
        });

        buttonBatalView.setBackground(new java.awt.Color(31, 85, 20));
        buttonBatalView.setForeground(new java.awt.Color(228, 229, 241));
        buttonBatalView.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/batal20x20.png"))); // NOI18N
        buttonBatalView.setText("Batal");
        buttonBatalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBatalViewActionPerformed(evt);
            }
        });

        jComboBoxCari.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ISBN", "Judul Buku", "Penerbit", "Tahun Terbit", "Kategori" }));
        jComboBoxCari.setKeySelectionManager(null);
        jComboBoxCari.setName(""); // NOI18N
        jComboBoxCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCariActionPerformed(evt);
            }
        });

        textFieldCari.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textFieldCari.setToolTipText("");
        textFieldCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textFieldCariKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout panelViewLayout = new javax.swing.GroupLayout(panelView);
        panelView.setLayout(panelViewLayout);
        panelViewLayout.setHorizontalGroup(
            panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelViewLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneDataPeminjamanBukuView, javax.swing.GroupLayout.DEFAULT_SIZE, 857, Short.MAX_VALUE)
                    .addGroup(panelViewLayout.createSequentialGroup()
                        .addComponent(jLabelDataPeminjamanBukuView)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panelViewLayout.createSequentialGroup()
                        .addComponent(buttonTambahView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonHapusView, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonBatalView, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(textFieldCari, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxCari, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelViewLayout.setVerticalGroup(
            panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelViewLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelDataPeminjamanBukuView)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(textFieldCari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBoxCari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonTambahView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(buttonHapusView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(buttonBatalView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPaneDataPeminjamanBukuView, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelMain.add(panelView, "card2");

        panelAdd.setBackground(new java.awt.Color(55, 55, 55));

        buttonSimpanAdd.setBackground(new java.awt.Color(31, 85, 20));
        buttonSimpanAdd.setForeground(new java.awt.Color(228, 229, 241));
        buttonSimpanAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/simpan20x20.png"))); // NOI18N
        buttonSimpanAdd.setText("Simpan");
        buttonSimpanAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSimpanAddActionPerformed(evt);
            }
        });

        buttonBatalAdd.setBackground(new java.awt.Color(31, 85, 20));
        buttonBatalAdd.setForeground(new java.awt.Color(228, 229, 241));
        buttonBatalAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/batal20x20.png"))); // NOI18N
        buttonBatalAdd.setText("Batal");
        buttonBatalAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBatalAddActionPerformed(evt);
            }
        });

        jLabelTambahDataPeminjamanBukuAdd.setFont(new java.awt.Font("Leelawadee UI", 1, 18)); // NOI18N
        jLabelTambahDataPeminjamanBukuAdd.setForeground(new java.awt.Color(242, 242, 242));
        jLabelTambahDataPeminjamanBukuAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/buku20x20.png"))); // NOI18N
        jLabelTambahDataPeminjamanBukuAdd.setText("Tambah Data Buku");

        jLabelIdMahasiswa.setFont(new java.awt.Font("Leelawadee UI", 1, 14)); // NOI18N
        jLabelIdMahasiswa.setForeground(new java.awt.Color(242, 242, 242));
        jLabelIdMahasiswa.setText("ISBN");

        textFieldJudul.setToolTipText("");

        jLabelIdMahasiswa1.setFont(new java.awt.Font("Leelawadee UI", 1, 14)); // NOI18N
        jLabelIdMahasiswa1.setForeground(new java.awt.Color(242, 242, 242));
        jLabelIdMahasiswa1.setText("Judul");

        textFieldISBN.setToolTipText("");

        textFieldTahunTerbit.setToolTipText("");

        jLabelIdMahasiswa4.setFont(new java.awt.Font("Leelawadee UI", 1, 14)); // NOI18N
        jLabelIdMahasiswa4.setForeground(new java.awt.Color(242, 242, 242));
        jLabelIdMahasiswa4.setText("Tahun Terbit");

        textFieldPenerbit.setToolTipText("");

        jLabelIdMahasiswa5.setFont(new java.awt.Font("Leelawadee UI", 1, 14)); // NOI18N
        jLabelIdMahasiswa5.setForeground(new java.awt.Color(242, 242, 242));
        jLabelIdMahasiswa5.setText("Penerbit");

        jLabelIdMahasiswa7.setFont(new java.awt.Font("Leelawadee UI", 1, 14)); // NOI18N
        jLabelIdMahasiswa7.setForeground(new java.awt.Color(242, 242, 242));
        jLabelIdMahasiswa7.setText("Kategori");

        jLabelGambar.setFont(new java.awt.Font("Leelawadee UI", 1, 48)); // NOI18N
        jLabelGambar.setForeground(new java.awt.Color(242, 242, 242));
        jLabelGambar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelGambar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/book64x64.png"))); // NOI18N
        jLabelGambar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(242, 242, 242)));

        buttonBrowse.setBackground(new java.awt.Color(31, 85, 20));
        buttonBrowse.setForeground(new java.awt.Color(228, 229, 241));
        buttonBrowse.setText("...");
        buttonBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBrowseActionPerformed(evt);
            }
        });

        textFieldPathGambar.setEditable(false);
        textFieldPathGambar.setToolTipText("");
        textFieldPathGambar.setRequestFocusEnabled(false);

        javax.swing.GroupLayout panelAddLayout = new javax.swing.GroupLayout(panelAdd);
        panelAdd.setLayout(panelAddLayout);
        panelAddLayout.setHorizontalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAddLayout.createSequentialGroup()
                        .addComponent(jLabelIdMahasiswa7)
                        .addGap(0, 799, Short.MAX_VALUE))
                    .addGroup(panelAddLayout.createSequentialGroup()
                        .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(textFieldJudul, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textFieldISBN, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textFieldTahunTerbit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textFieldPenerbit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelAddLayout.createSequentialGroup()
                                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelTambahDataPeminjamanBukuAdd, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelIdMahasiswa1, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelIdMahasiswa4, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelIdMahasiswa5, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelAddLayout.createSequentialGroup()
                                        .addComponent(buttonSimpanAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(buttonBatalAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabelIdMahasiswa, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(0, 413, Short.MAX_VALUE))
                            .addComponent(jComboBoxKategori, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(42, 42, 42)
                        .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelAddLayout.createSequentialGroup()
                                .addComponent(textFieldPathGambar, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabelGambar, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        panelAddLayout.setVerticalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelTambahDataPeminjamanBukuAdd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSimpanAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonBatalAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabelIdMahasiswa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAddLayout.createSequentialGroup()
                        .addComponent(textFieldISBN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelIdMahasiswa1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textFieldJudul, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelIdMahasiswa5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textFieldPenerbit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelIdMahasiswa4))
                    .addGroup(panelAddLayout.createSequentialGroup()
                        .addComponent(jLabelGambar, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(textFieldPathGambar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textFieldTahunTerbit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelIdMahasiswa7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxKategori, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(79, 79, 79))
        );

        panelMain.add(panelAdd, "card2");

        add(panelMain, "card2");
    }// </editor-fold>//GEN-END:initComponents


    private void buttonBatalAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBatalAddActionPerformed
        // TODO add your handling code here:
//        panelMain.removeAll();
//        panelMain.repaint();
//        panelMain.revalidate();
//
//        panelMain.add(panelView);
//        panelMain.repaint();
//        panelMain.revalidate();
        showPanel();
        loadData();
    }//GEN-LAST:event_buttonBatalAddActionPerformed

    private void buttonBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBrowseActionPerformed
        // TODO add your handling code here:
        getImage();
    }//GEN-LAST:event_buttonBrowseActionPerformed

    private void buttonTambahViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTambahViewActionPerformed
        // TODO add your handling code here:
        panelMain.removeAll();
        panelMain.repaint();
        panelMain.revalidate();

        panelMain.add(panelAdd);
        panelMain.repaint();
        panelMain.revalidate();
        getKategori();
        textFieldISBN.grabFocus();
        if (buttonTambahView.getText().equals("Ubah")) {
            dataTabel();
            buttonSimpanAdd.setText("Perbarui");
        }
    }//GEN-LAST:event_buttonTambahViewActionPerformed

    private void textFieldCariKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldCariKeyReleased
        // TODO add your handling code here:
        cariData();
    }//GEN-LAST:event_textFieldCariKeyReleased

    private void buttonHapusViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonHapusViewActionPerformed
        // TODO add your handling code here:
        hapusData();
    }//GEN-LAST:event_buttonHapusViewActionPerformed

    private void buttonBatalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBatalViewActionPerformed
        // TODO add your handling code here:
        showPanel();
        loadData();
    }//GEN-LAST:event_buttonBatalViewActionPerformed

    private void jTableDataPeminjamanBukuViewMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableDataPeminjamanBukuViewMousePressed
        // TODO add your handling code here:
        if (buttonTambahView.getText().equals("Tambah")) {
            buttonTambahView.setText("Ubah");
            buttonTambahView.setIcon(new ImageIcon(getClass().getResource("/assets/update20x20.png")));
            buttonHapusView.setVisible(true);
            buttonBatalView.setVisible(true);
        }
    }//GEN-LAST:event_jTableDataPeminjamanBukuViewMousePressed

    private void buttonSimpanAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSimpanAddActionPerformed
        // TODO add your handling code here:
        if (buttonSimpanAdd.getText().equals("Tambah")) {
            buttonSimpanAdd.setText("Simpan");
        } else if (buttonSimpanAdd.getText().equals("Simpan")) {
            insertData();
        } else if (buttonSimpanAdd.getText().equals("Perbarui")) {
            updateData();
        }
    }//GEN-LAST:event_buttonSimpanAddActionPerformed

    private void jComboBoxCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCariActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxCariActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private model.Button buttonBatalAdd;
    private model.Button buttonBatalView;
    private model.Button buttonBrowse;
    private javax.swing.ButtonGroup buttonGroup1;
    private model.Button buttonHapusView;
    private model.Button buttonSimpanAdd;
    private model.Button buttonTambahView;
    private model.DateChooser dateTanggalBergabung;
    private model.DateChooser dateTanggalKembali;
    private javax.swing.JComboBox<String> jComboBoxCari;
    private javax.swing.JComboBox<String> jComboBoxKategori;
    private javax.swing.JLabel jLabelDataPeminjamanBukuView;
    private javax.swing.JLabel jLabelGambar;
    private javax.swing.JLabel jLabelIdMahasiswa;
    private javax.swing.JLabel jLabelIdMahasiswa1;
    private javax.swing.JLabel jLabelIdMahasiswa4;
    private javax.swing.JLabel jLabelIdMahasiswa5;
    private javax.swing.JLabel jLabelIdMahasiswa7;
    private javax.swing.JLabel jLabelTambahDataPeminjamanBukuAdd;
    private javax.swing.JScrollPane jScrollPaneDataPeminjamanBukuView;
    private javax.swing.JTable jTableDataPeminjamanBukuView;
    private com.raven.swing.RoundPanel panelAdd;
    private com.raven.swing.RoundPanel panelMain;
    private com.raven.swing.RoundPanel panelView;
    private javax.swing.JTextField textFieldCari;
    private model.TextField textFieldISBN;
    private model.TextField textFieldJudul;
    private model.TextField textFieldPathGambar;
    private model.TextField textFieldPenerbit;
    private model.TextField textFieldTahunTerbit;
    // End of variables declaration//GEN-END:variables

    private void getKategori() {
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        model.addElement("Pilih Kategori");
        em.getTransaction().begin();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<Kategori> cq = cb.createQuery(Kategori.class);

        Root<Kategori> mhs = cq.from(Kategori.class);

        cq.multiselect(mhs.get("namaKategori"));
        CriteriaQuery<Kategori> select = cq.select(mhs);
        TypedQuery<Kategori> q = em.createQuery(select);
        List<Kategori> list = q.getResultList();

        for (Kategori m : list) {
            model.addElement(m.getNamaKategori());
        }
        em.getTransaction().commit();
//        String valuemodel
        jComboBoxKategori.setModel(model);
        jComboBoxKategori.addActionListener(e -> {
            int selectIndex = jComboBoxKategori.getSelectedIndex();

            if (selectIndex > 0) {
                em.getTransaction().begin();
                CriteriaQuery<Kategori> cc = cb.createQuery(Kategori.class);
                cq.select(mhs.get("idKategori"));
                cq.where(cb.equal(mhs.get("idKategori"), "KTG" + String.format("%02d", selectIndex)));
                TypedQuery<Kategori> qqq = em.createQuery(cc);
                idKategori = qqq.getSingleResult();
                em.getTransaction().commit();
            }
        });
    }

    private void getData(DefaultTableModel model) {
        model.setRowCount(0);
        em.getTransaction().begin();

        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<Object[]> cq = cb.createQuery(Object[].class);

        Root<Buku> bukuRoot = cq.from(Buku.class);
        Join<Buku, Kategori> kategoriJoin = bukuRoot.join("idKategori", JoinType.INNER);

        cq.multiselect(
                bukuRoot.get("isbn"),
                bukuRoot.get("judulBuku"),
                bukuRoot.get("penerbit"),
                bukuRoot.get("tahunTerbit"),
                bukuRoot.get("gambar"),
                kategoriJoin.get("namaKategori")
        );

        TypedQuery<Object[]> query = em.createQuery(cq);
        List<Object[]> resultList = query.getResultList();
        for (Object[] row : resultList) {
            byte[] imageBytes = (byte[]) row[4]; // Assuming the index 4 corresponds to the 'gambar' field
            ImageIcon imageIcon = new ImageIcon(imageBytes);

            model.addRow(new Object[]{
                row[0], // isbn
                row[1], // judulBuku
                row[2], // penerbit
                row[3], // tahunTerbit
                row[5], // kategori
                imageIcon // gambar
            });
        }
        em.getTransaction().commit();
    }

    private void insertData() {
        String isbn = textFieldISBN.getText();
        String judul = textFieldJudul.getText();
        String penerbit = textFieldPenerbit.getText();
        String tahun = textFieldTahunTerbit.getText();
        Kategori idKategori = this.idKategori;
        String gambarPath = textFieldPathGambar.getText();
        File gambarFile = new File(gambarPath);

        if (isbn.isEmpty() || judul.isEmpty() || penerbit.isEmpty() || tahun.isEmpty() || jComboBoxKategori.getSelectedItem().toString().equals("Pilih Buku")) {
            JOptionPane.showMessageDialog(this, "Semua kolom harus diisi!", "Validasi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!validNama()) {
            return;
        }

        em.getTransaction().begin();
        Buku simpanBuku = new Buku();
        simpanBuku.setIsbn(isbn);
        simpanBuku.setJudulBuku(judul);
        simpanBuku.setPenerbit(penerbit);
        simpanBuku.setTahunTerbit(tahun);
        simpanBuku.setIdKategori(idKategori);
        try {
            FileInputStream fis = new FileInputStream(gambarFile);
            simpanBuku.setGambar(fis.readAllBytes());

        } catch (FileNotFoundException ex) {
            Logger.getLogger(FormDataBuku.class
                    .getName()).log(Level.SEVERE, null, ex);

        } catch (IOException ex) {
            Logger.getLogger(FormDataBuku.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        em.persist(simpanBuku);
        em.getTransaction().commit();
        JOptionPane.showMessageDialog(this, "Penyimpanan Data Berhasil");
        resetForm();
        loadData();
        showPanel();
    }

    private void updateData() {
        String isbn = textFieldISBN.getText();
        String judul = textFieldJudul.getText();
        String penerbit = textFieldPenerbit.getText();
        String tahun = textFieldTahunTerbit.getText();
        Kategori idKategori = this.idKategori;
        String gambarPath = textFieldPathGambar.getText();
        File gambarFile = new File(gambarPath);

        if (isbn.isEmpty() || judul.isEmpty() || penerbit.isEmpty() || tahun.isEmpty() || jComboBoxKategori.getSelectedItem().toString().equals("Pilih Buku")) {
            JOptionPane.showMessageDialog(this, "Semua kolom harus diisi!", "Validasi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!validNama()) {
            return;
        }

        em.getTransaction().begin();
        Buku updateBuku = em.find(Buku.class, isbn);
        updateBuku.setIsbn(isbn);
        updateBuku.setJudulBuku(judul);
        updateBuku.setPenerbit(penerbit);
        updateBuku.setTahunTerbit(tahun);
        updateBuku.setIdKategori(idKategori);
        try {
            FileInputStream fis = new FileInputStream(gambarFile);
            updateBuku.setGambar(fis.readAllBytes());

        } catch (FileNotFoundException ex) {
            Logger.getLogger(FormDataBuku.class
                    .getName()).log(Level.SEVERE, null, ex);

        } catch (IOException ex) {
            Logger.getLogger(FormDataBuku.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        em.getTransaction().commit();
        JOptionPane.showMessageDialog(this, "Pembaruan Data Berhasil");
        resetForm();
        loadData();
        showPanel();
    }

    private void hapusData() {
        int confirm = JOptionPane.showConfirmDialog(this,
                "Apakah yakin ingin menghapus data ini?",
                "Konfirmasi Hapus Data",
                JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            em.getTransaction().begin();
            for (int i = 0; i < jTableDataPeminjamanBukuView.getSelectedRowCount(); i++) {
                String selectedRows = jTableDataPeminjamanBukuView.getModel().getValueAt(i, 0).toString();
                Buku hapusBuku = em.find(Buku.class,
                        selectedRows);
                em.remove(hapusBuku);
            }
            em.getTransaction().commit();
            JOptionPane.showMessageDialog(this, "Penghapusan Data Berhasil", "", JOptionPane.INFORMATION_MESSAGE);
            resetForm();
            loadData();
            showPanel();
        } else if (confirm == JOptionPane.NO_OPTION) {
            JOptionPane.showMessageDialog(this, "Penghapusan Data Gagal", "", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void cariData() {
        String[] valueModel = {"isbn", "judulBuku", "penerbit", "tahunTerbit", "namaKategori"};
        if (jComboBoxCari.getSelectedIndex() == 4) {
            DefaultTableModel model = (DefaultTableModel) jTableDataPeminjamanBukuView.getModel();
            model.setRowCount(0);

            em.getTransaction().begin();

            CriteriaBuilder cb = em.getCriteriaBuilder();
            CriteriaQuery<Object[]> cq = cb.createQuery(Object[].class);

            Root<Buku> bukuRoot = cq.from(Buku.class);
            Join<Buku, Kategori> kategoriJoin = bukuRoot.join("idKategori", JoinType.INNER);
            cq.where(cb.like(cb.upper(kategoriJoin.get(valueModel[jComboBoxCari.getSelectedIndex()])), "%" + textFieldCari.getText().toUpperCase() + "%"));
            cq.multiselect(
                    bukuRoot.get("isbn"),
                    bukuRoot.get("judulBuku"),
                    bukuRoot.get("penerbit"),
                    bukuRoot.get("tahunTerbit"),
                    bukuRoot.get("gambar"),
                    kategoriJoin.get("namaKategori")
            );

            TypedQuery<Object[]> query = em.createQuery(cq);
            List<Object[]> resultList = query.getResultList();
            for (Object[] row : resultList) {
                byte[] imageBytes = (byte[]) row[4]; // Assuming the index 4 corresponds to the 'gambar' field
                ImageIcon imageIcon = new ImageIcon(imageBytes);

                model.addRow(new Object[]{
                    row[0], // isbn
                    row[1], // judulBuku
                    row[2], // penerbit
                    row[3], // tahunTerbit
                    row[5], // kategori
                    imageIcon // gambar
                });
            }
            em.getTransaction().commit();
            
        } else {
            DefaultTableModel model = (DefaultTableModel) jTableDataPeminjamanBukuView.getModel();
            model.setRowCount(0);

            em.getTransaction().begin();

            CriteriaBuilder cb = em.getCriteriaBuilder();
            CriteriaQuery<Object[]> cq = cb.createQuery(Object[].class);

            Root<Buku> bukuRoot = cq.from(Buku.class);
            Join<Buku, Kategori> kategoriJoin = bukuRoot.join("idKategori", JoinType.INNER);
            cq.where(cb.like(cb.upper(bukuRoot.get(valueModel[jComboBoxCari.getSelectedIndex()])), "%" + textFieldCari.getText().toUpperCase() + "%"));
            cq.multiselect(
                    bukuRoot.get("isbn"),
                    bukuRoot.get("judulBuku"),
                    bukuRoot.get("penerbit"),
                    bukuRoot.get("tahunTerbit"),
                    bukuRoot.get("gambar"),
                    kategoriJoin.get("namaKategori")
            );

            TypedQuery<Object[]> query = em.createQuery(cq);
            List<Object[]> resultList = query.getResultList();
            for (Object[] row : resultList) {
                byte[] imageBytes = (byte[]) row[4]; // Assuming the index 4 corresponds to the 'gambar' field
                ImageIcon imageIcon = new ImageIcon(imageBytes);

                model.addRow(new Object[]{
                    row[0], // isbn
                    row[1], // judulBuku
                    row[2], // penerbit
                    row[3], // tahunTerbit
                    row[5], // kategori
                    imageIcon // gambar
                });
            }
            em.getTransaction().commit();
        }

    }

    private String setIdBuku() {
        String urutan = null;

        em.getTransaction().begin();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<String> cq = cb.createQuery(String.class
        );
        Root<Buku> mhsRoot = cq.from(Buku.class
        );

        cq.select(mhsRoot.get("idBuku"));
        cq.where(cb.like(mhsRoot.get("idBuku"), "KTG%")); //KTG05
        cq.orderBy(cb.asc(mhsRoot.get("idBuku")));

        TypedQuery<String> query = em.createQuery(cq);
        query.setMaxResults(1);

        try {
            String lastNim = query.getSingleResult();
            int nomor = Integer.parseInt(lastNim.substring(lastNim.length() - 2)) + 1; // KTG06
            urutan = "KTG" + String.format("%02d", nomor);
        } catch (NoResultException e) {
            urutan = "KTG" + "01";
        }

        em.getTransaction().commit();
        return urutan;
    }

    private boolean validNama() {
        boolean valid = false;
        String isbn = textFieldISBN.getText();
        String judulBuku = textFieldJudul.getText();

        em.getTransaction().begin();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<String> cq = cb.createQuery(String.class);
        Root<Buku> mhsRoot = cq.from(Buku.class);

        cq.select(mhsRoot.get("isbn"));
        cq.where(cb.and(cb.like(mhsRoot.get("isbn"), isbn), cb.like(mhsRoot.get("judulBuku"), judulBuku))); //KTG05
        cq.orderBy(cb.desc(mhsRoot.get("isbn")));

        TypedQuery<String> query = em.createQuery(cq);
        query.setMaxResults(1);

        try {
            JOptionPane.showMessageDialog(this,
                    "Nama Buku sudah ada\nSilahkan input nama Buku yang berbeda",
                    "Peringatan", JOptionPane.WARNING_MESSAGE);
        } catch (NoResultException e) {
            valid = true;
        }
        em.getTransaction().commit();
        return valid;
    }

    private void loadData() {
        getData((DefaultTableModel) jTableDataPeminjamanBukuView.getModel());
        buttonHapusView.setVisible(false);
        buttonBatalView.setVisible(false);

    }

    private void showPanel() {
        panelMain.removeAll();
        panelMain.add(new FormDataBuku());
        panelMain.repaint();
        panelMain.revalidate();
    }

    private void resetForm() {
        textFieldISBN.setText("");
        textFieldJudul.setText("");
        textFieldPenerbit.setText("");
        textFieldTahunTerbit.setText("");

    }

    private void dataTabel() {
        panelView.setVisible(false);
        panelAdd.setVisible(true);

        int row = jTableDataPeminjamanBukuView.getSelectedRow();
        jLabelTambahDataPeminjamanBukuAdd.setText("Perbarui Data Buku");

        textFieldISBN.setEnabled(false);
        textFieldISBN.setText(jTableDataPeminjamanBukuView.getValueAt(row, 0).toString());
        textFieldJudul.setText(jTableDataPeminjamanBukuView.getValueAt(row, 1).toString());
        textFieldPenerbit.setText(jTableDataPeminjamanBukuView.getValueAt(row, 2).toString());
        textFieldTahunTerbit.setText(jTableDataPeminjamanBukuView.getValueAt(row, 3).toString());
//        byte[] imageData = (byte[]) jTableDataPeminjamanBukuView.getValueAt(row, 4);
//        ImageIcon imageIcon = new ImageIcon(imageData);
//        jLabelGambar.setIcon(imageIcon);

    }

    private void getImage() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setFileFilter(new FileNameExtensionFilter("Gambar", "jpg", "png", "jpeg"));
    }

    private void setTableModel() {
//        class MyTabelModel extends DefaultTableModel {
//
//            @Override
//            public Class<?> getColumnClass(int columnIndex) {
//                if (columnIndex == 5) {
//                    return ImageIcon.class;
//                }
//                return super.getColumnClass(columnIndex); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
//            }
//
//            @Override
//            public Object getValueAt(int row, int column) {
//                if (column == 5) {
//                    return data[row][5];
//                }
//                return data[row][column]; // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
//            }
//            
//            
//
//        }
        DefaultTableModel model = (DefaultTableModel) jTableDataPeminjamanBukuView.getModel();
        model.setColumnCount(0);
        model.addColumn("ISBN");
        model.addColumn("Judul Buku");
        model.addColumn("Penerbit");
        model.addColumn("Tahun Terbit");
        model.addColumn("Kategori");
        model.addColumn("Gambar");
    }
}
